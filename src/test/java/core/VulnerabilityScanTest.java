package core;
import environment.*;
import knowledge.SoftwareKnowledge;
import org.junit.BeforeClass;
import org.junit.Test;
import run.Simulation;


import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

/**
 * Created by linus on 10.01.21.
 */
public class VulnerabilityScanTest {

    static NetworkWorld networkWorld = Simulation.getSimWorld();
    static State state = core.State.getStartState();
    static NetworkNode.TYPE target = NetworkNode.TYPE.WEBSERVER;
    static NetworkNode.TYPE currentActor = NetworkNode.TYPE.ADVERSARY;
    static Set<Software> softwareOnTarget = new HashSet<>();

    @BeforeClass
    public static void setUp(){
        Simulation.setupWorld(true);

        Map<NetworkNode.TYPE, Set<Software>> remotelyVisibleSWInNetwork = NetworkTopology.getRemoteSWMapByScanningNode(currentActor);
        for (Software software:remotelyVisibleSWInNetwork.get(target)){
            state.addNodeRemoteSoftwareName(target, software.getName(), true);
        }
        //get all software information on the target
        NetworkNode actualTarget = Simulation.getNodeByType(target);
        state.addNodeKnowledge(target);
        state.addNodePubIp(target, actualTarget.getPub_ip());
        state.addNodeHostname(target, actualTarget.getHostname());
        softwareOnTarget.addAll(actualTarget.getLocalSoftware());
        softwareOnTarget.addAll(actualTarget.getRemoteSoftware());
    }

    @Test
    public void testFindVulnerability(){
        State newState = AdversaryAction.ACTIVE_SCAN_VULNERABILITY.executePostConditionOnTarget(target,state,currentActor);
        for(Software s : softwareOnTarget){
            for(SoftwareKnowledge softwareKnowledge : newState.getSoftwareKnowledgeMap().get(target)){
                if(s.getName().equals(softwareKnowledge.getName())&&s.getVersion().equals(softwareKnowledge.getVersion())){
                    for(Vulnerability v: softwareKnowledge.getVulnerabilities()){
                        assertTrue(s.getVulnerabilities().contains(v));
                    }
                }
            }

        }
    }

    @Test
    public void testSetOfAttackableNodes(){
        Set<NetworkNode.TYPE> attackableNodes = AdversaryAction.ACTIVE_SCAN_VULNERABILITY.getTargetsWhichFulfillPrecondition(state,currentActor);
        assertEquals(1,attackableNodes.size());
        assertTrue(attackableNodes.contains(target));
    }


}
